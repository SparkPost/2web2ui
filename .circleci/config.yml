version: 2.1

defaults: &defaults
  docker:
    - image: circleci/node:10.17.0

commands:
  # NPM caching commands based on: https://circleci.com/docs/2.0/caching/#restoring-cache
  restore_npm_cache:
    description: 'Restores cached Node modules'
    steps:
      - restore_cache:
          keys:
            # From CircleCI docs:
            #   "Caches are immutable so it is useful to start all your cache keys with a version prefix,
            #    for example v1-.... This enables you to regenerate all of your caches by incrementing
            #    the version in this prefix."
            # We simplified the cache key according to advice from Cypress founder Gleb Bahmutov:
            # https://glebbahmutov.com/blog/do-not-let-cypress-cache-snowball/
            - v3-deps-{{ checksum "package-lock.json" }}

  save_npm_cache:
    description: 'Saves Node modules for later re-use'
    steps:
      - save_cache:
          key: v3-deps-{{ checksum "package-lock.json" }}
          paths:
            - ~/.npm
            - ~/.cache/Cypress

  setup:
    description:
      'Checks out the relevant branch, checks for cached dependencies, installs them if something
      changed.'
    steps:
      - checkout
      - restore_npm_cache
      - run:
          name: 'Installing NPM dependencies'
          command: npm ci
      - save_npm_cache

  cypress_cleanup:
    steps:
      - store_test_results:
          name: 'Upload test report'
          path: test_results
      - store_artifacts:
          name: 'Upload test results'
          path: /root/project/test_results/cypress
          destination: cypress-test-results
      - store_artifacts:
          name: 'Upload videos'
          path: /root/project/cypress/videos
          destination: cypress-videos
      - store_artifacts:
          name: 'Upload screenshots'
          path: /root/project/cypress/screenshots
          destination: cypress-screenshots


# These are what actually get run in a workflow
jobs:
  'Unit Testing':
    <<: *defaults
    parallelism: 4
    steps:
      - setup
      - run:
          command:
            npm run test-ci $(circleci tests glob ".eslintplugin/**/*.test.js" "./src/**/*.test.js" "./scripts/**/*.test.js" |
            circleci tests split --split-by=timings)
      - store_test_results:
          name: 'Upload test report'
          path: test_results
      - store_artifacts:
          name: 'Upload test results'
          path: /home/circleci/project/test_results
          destination: jest-test-results

  'Build':
    <<: *defaults
    steps:
      - setup
      - run:
          name: 'Running production build'
          command: 'npm run build'
      - run:
          name: 'Move built assets to the workspace directory'
          command: mkdir -p workspace && mv build workspace
      # Saves the build folder to a temporary workspace directory for use by later jobs
      - persist_to_workspace:
          root: workspace
          paths:
            - build

  'Integration Testing':
    docker:
      - image: cypress/browsers
    parallelism: 7
    steps:
      - setup
      # Restores the /build folder from the previous job
      - attach_workspace:
          at: ./
      - run:
          name: 'Run Cypress Integration Tests'
          command: |
            function join { local IFS="$1"; shift; echo "$*"; }
            SPECS=$(circleci tests glob "./cypress/tests/integration/**/*.spec.js" | circleci tests split --split-by=timings);spec="${SPECS[@]}"
            echo $SPECS
            FORMATTED_SPECS=$(join , ${SPECS[@]})
            echo $FORMATTED_SPECS
            npm run test-integration-ci -- --spec $FORMATTED_SPECS
      - cypress_cleanup

  'Integration Testing - Targeted':
    docker:
      - image: cypress/browsers
    description: 'Runs integration tests structured for individual test debugging'
    parameters:
      specs:
        type: string
        default: ''
    steps:
      - setup
      # Restores the /build folder from the previous job
      - attach_workspace:
          at: ./
      - run:
          name: 'Run Cypress Integration Tests - Targeted'
          command: |
            SPECS=<< parameters.specs >>
            npm run test-integration-ci -- --spec $SPECS
      - cypress_cleanup

workflows:
  version: 2
  test-and-build:
    jobs:
      - 'Unit Testing'
      - 'Build'
      - 'Integration Testing':
          requires:
            - 'Build'

      # Uncomment these jobs to run targeted integration tests by passing in
      # the targeted filename to run an individual spec or groups of specs.
      # See: https://docs.cypress.io/guides/guides/command-line.html#cypress-run for formatting tips.
      #
      # - 'Integration Testing - Targeted':
      #     specs: "./cypress/tests/integration/<your-glob-pattern-goes-here>.spec.js"
      #     requires:
      #       - 'Build'
